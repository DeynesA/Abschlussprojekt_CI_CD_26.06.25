pipeline {
    agent any

    // Auswahl der Umgebung: Entwicklung oder Produktion
    parameters {
        choice(
            name: 'MAVEN_PROFILE',
            choices: ['dev', 'prod'],
            description: 'Wähle Maven-Profil (dev oder prod)'
        )
    }

    // Zentrale Projektkonstanten
    environment {
        REPO_URL       = 'https://github.com/DeynesA/Abschlussprojekt_CI_CD_26.06.25.git'   // Git-Quelle
        DOCKER_IMAGE   = 'arthurs-ci-cd-pipeline'                                           // Bildname für Registry
        REGISTRY_URL   = 'registrykurs.azurecr.io'                                          // Container-Registry
        CREDENTIALS_ID = 'azure-container-registry-creds'                                   // Jenkins-Zugangsdaten (Credential-ID in Jenkins)
        BUILD_TAG      = "${env.BUILD_ID}-${params.MAVEN_PROFILE}"                          // Versions-Tag
        FULL_TAG       = "${REGISTRY_URL}/${DOCKER_IMAGE}:${BUILD_TAG}"                     // Vollständiges Docker-Image-Tag
    }

    stages {

        stage('Code Checkout') {
            steps {
                git branch: 'main', url: env.REPO_URL
                // Holt den Code aus dem GitHub-Repository.
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    sh "mvn clean verify -P${params.MAVEN_PROFILE}"
         // Baut das Backend mit gewähltem Maven-Profil und testet.
            }
        }
     }
        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh 'npm install && npm run build'
                    // Baut das Frontend – im 'frontend'-Verzeichnis.
                }
            }
        }

        stage('Test Frontend') {
            steps {
                dir('frontend') {
                    // Prod → Tests müssen erfolgreich sein. Dev → Fehler sind erlaubt.
                    script {
                        if (params.MAVEN_PROFILE == 'prod') {
                            sh 'npm test'
                        } else {
                            sh 'npm test || echo "Frontend-Tests fehlgeschlagen (Dev-Modus)"'
                        }
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: env.CREDENTIALS_ID,
                    usernameVariable: 'USER',
                    passwordVariable: 'PASS'
                )]) {
                    sh "echo ${PASS} | docker login ${REGISTRY_URL} -u ${USER} --password-stdin"
                    sh "docker build -t ${FULL_TAG} ."
                    sh "docker push ${FULL_TAG}"
                    sh "docker logout ${REGISTRY_URL}"
                    // Docker-Image bauen, pushen, und sauber abmelden.
                }
            }
        }

        stage('Deployment') {
            steps {
                script {
                    def target = (params.MAVEN_PROFILE == 'prod') ? 'prod.yaml' : 'dev.yaml'
                    sh "kubectl apply -f ./k8s/${target}"
                    // Wählt automatisch die passende YAML je nach Umgebung.
                }
            }
        }
    }

    post {
        always {
            echo "Der Arbeitsbereich wird bereinigt"
            sh "rm -rf ./*"
            // Bereinigt den Arbeitsbereich nach Abschluss der Pipeline.
        }
        success {
            echo "Pipeline erfolgreich abgeschlossen für ${params.MAVEN_PROFILE}"
        }
        failure {
            echo "Die Pipeline ist fehlgeschlagen bitte Logs prüfen"
        }
    }
}
