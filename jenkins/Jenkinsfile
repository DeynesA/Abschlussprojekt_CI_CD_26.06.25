pipeline {
  agent any  // Nutzt beliebigen Jenkins-Agent

  parameters {
    // Umgebung wird als Parameter √ºbergeben (dev oder prod)
    string(name: 'ENV', defaultValue: 'dev', description: 'Umgebung w√§hlen')
  }

  environment {
    // Registry und Bild-Tags vorbereiten
    REGISTRY = "registrykurs1.azurecr.io"
    TAG      = "${BUILD_NUMBER}-${params.ENV}"

    // Docker-Image-Namen mit Umgebungstag
    IMAGE_BACKEND  = "${REGISTRY}/arthur-backend:${TAG}"
    IMAGE_FRONTEND = "${REGISTRY}/arthur-frontend:${TAG}"
  }

  stages {

    stage('Checkout') {
      steps {
        // Hole aktuellen Code vom GitHub-Repo
        git 'https://github.com/DeynesA/Abschlussprojekt_CI_CD_26.06.25.git'
      }
    }

    stage('Build & Test Backend') {
      steps {
        dir('backend') {
          // Maven-Profil dev/prod aktivieren, Tests sind im "verify" enthalten
          sh "mvn clean package -P${params.ENV}"
        }
      }
    }

    stage('Build & Test Frontend') {
      steps {
        dir('frontend') {
          // Installiere Pakete & baue Frontend
          sh "npm install && npm run build"

          // Nur in prod sind Tests Pflicht
          script {
            if (params.ENV == 'prod') {
              sh "npm test"
            } else {
              sh "npm test || echo 'Frontend-Tests in DEV d√ºrfen fehlschlagen'"
            }
          }
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'azure-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
            // Docker-Login + Image-Build & Push
            sh "echo $PASS | docker login $REGISTRY -u $USER --password-stdin"
            sh "docker build -t ${REGISTRY_URL}/${IMAGE_BACKEND}:${params.BUILD_ENV} ./backend"
            sh "docker build -t ${REGISTRY_URL}/${IMAGE_FRONTEND}:${params.BUILD_ENV} ./frontend"
            sh "docker push ${REGISTRY_URL}/${IMAGE_BACKEND}:${params.BUILD_ENV}"
            sh "docker push ${REGISTRY_URL}/${IMAGE_FRONTEND}:${params.BUILD_ENV}"
        }
      }
    }

    stage('Deploy to Kubernete') {
      when { expression { params.ENV == 'prod' } }
      steps {
        // Warte auf manuelle Freigabe vor Deployment nach PROD
        input message: "Produktionsdeployment freigeben?"
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                withCredentials([file(credentialsId: "kubeconfig-${params.ENV}", variable: 'KUBECONFIG')]) {
                // W√§hle passende YAML je nach Umgebung
                    sh "kubectl apply -f k8s/${params.ENV}.yaml"
          }
        }
      }
    }
  }

  post {
    always {
      // Bereinige Workspace am Ende
      echo "üßπ Bereinige Jenkins-Arbeitsverzeichnis..."
      sh "rm -rf backend frontend"
    }
    success {
      echo "Pipeline erfolgreich abgeschlossen f√ºr ${params.ENV}"
    }
    failure {
      echo "Pipeline fehlgeschlagen ‚Äì bitte Logs pr√ºfen"
    }
  }
}
